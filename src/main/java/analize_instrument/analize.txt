1 Реализуем дополнительные классы для анализа:
https://github.com/SergeyVolko/job4j_tracker/commit/ebe2a2b269c9e99e83bcc57a0861472855d7f907
2 Проанализируем работу jmap для начального запуска приложения, после добавления 100000
элементов и после удаления 100000:
   а) После начального запуска мы увидим такой отчет:
   https://github.com/SergeyVolko/job4j_tracker/commit/51adb83d3edf532454ee642295773e4c94993330
   Из этого отчета видно, что используемая память равна 1666872 байт

   б) После добавления 100000 элементов увидим такой отчет:
   https://github.com/SergeyVolko/job4j_tracker/commit/8e6a849ce57d9dcd120544ba723738f8d53d27f1
   Из этого отчета видно, что общая память увеличилась до 17509744 байт.
   Шестая строчка:
    6:        100000        2400000  ru.job4j.tracker.Item
    В данной строчке память увеличилась до 2400000 байт.
    в)После удаления получим следующий отчет:
    https://github.com/SergeyVolko/job4j_tracker/commit/3b139204943798ede00c066b614851dbb1b9dd93
    Из этого отчета видно, что используемая память равна 2389816 байт
3 Проанализируем работу jstat.
https://github.com/SergeyVolko/job4j_tracker/commit/084cf873db45d4fb6c15897028253ec8a58a0510
На 104.1 секунде у нас ОС уменшилось с 114688,0 до 112640,0 и в SC1 появилась память 2048.0 байт.
Это означает, что произошла сборка мусора.

4. При увеличении доступной памяти при добавлении элементов больше 2048000 программа падает с
исключением java.lang.OutOfMemoryError.


